apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: continuous-integration-
spec:
  arguments:
    parameters:
      - name: repo
        value: git@github.com:tenlastic/open-platform.git
      - name: revision
  entrypoint: pipeline
  podGC:
    strategy: OnPodSuccess
  serviceAccountName: argo-workflow
  ttlStrategy:
    secondsAfterSuccess: 1296000
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
  volumes:
    - name: cd-ssh-keys
      secret:
        secretName: cd-ssh-keys
        defaultMode: 0600
  templates:
    - name: pipeline
      inputs:
        parameters:
          - name: repo
          - name: revision
      steps:
        - - name: checkout
            template: checkout
            arguments:
              parameters:
                - name: repo
                  value: "{{inputs.parameters.repo}}"
                - name: revision
                  value: "{{inputs.parameters.revision}}"

        - - name: skip-ci
            template: skip-ci

        - - name: get-branch
            template: get-branch
            arguments:
              parameters:
                - name: revision
                  value: "{{inputs.parameters.revision}}"

        - - name: bootstrap
            template: bootstrap
            when: "'{{steps.skip-ci.outputs.result}}' == 'false'"

        - - name: continuous-integration-nodejs
            template: continuous-integration-nodejs
            when: "'{{steps.skip-ci.outputs.result}}' == 'false'"

        - - name: continuous-integration-angular
            template: continuous-integration-angular
            when: "'{{steps.skip-ci.outputs.result}}' == 'false'"

        - - name: migrations
            template: migrations
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"

        - - name: terraform
            template: terraform
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"

        - - name: publish-npm-modules
            template: publish-npm-modules
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"

        - - name: get-docker-images
            template: get-docker-images
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"

        - - arguments:
              parameters:
                - name: context
                  value: "{{item.location}}"
                - name: dockerfile
                  value: ../../Dockerfile
                - name: image
                  value: "{{item.name}}"
                - name: tag
                  value: "{{item.version}}"
            name: publish-docker-images
            template: publish-docker-image
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"
            withParam: "{{steps.get-docker-images.outputs.result}}"

        - - name: publish-electron-applications
            template: publish-electron-applications
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"

        - - arguments:
              parameters:
                - name: context
                  value: "{{item.context}}"
                - name: dockerfile
                  value: Dockerfile
                - name: image
                  value: "{{item.image}}"
                - name: tag
                  value: "{{steps.publish-npm-modules.outputs.result}}"
            name: publish-miscellaneous-docker-images
            template: publish-docker-image
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"
            withItems:
              - context: /workspace/dockerfiles/development-cli/
                image: development-cli
              - context: /workspace/dockerfiles/mongo-replica-set/
                image: mongo-replica-set
              - context: /workspace/dockerfiles/node-chrome-lerna/
                image: node-chrome-lerna

    - name: bootstrap
      script:
        image: tenlastic/node-chrome-lerna:latest
        command: [sh]
        source: lerna bootstrap --ci --hoist --include-dependencies --strict
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/projects/javascript/
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: checkout
      script:
        image: alpine/git:latest
        command: [sh]
        source: |
          # Add Host Key for Github.
          mkdir -p /root/.ssh/
          ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
          cp /tmp/secrets/cd-ssh-keys/id_rsa /root/.ssh/id_rsa

          # Use SSH instead of HTTPS.
          git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
          git config --global gc.auto 0 || true

          # Clone repository and reset to specific revision.
          git clone {{inputs.parameters.repo}} /usr/src/app/
          cd /usr/src/app/
          git fetch --all
          git reset --hard {{inputs.parameters.revision}}
        volumeMounts:
          - name: cd-ssh-keys
            mountPath: /tmp/secrets/cd-ssh-keys/
            readonly: true
          - name: workspace
            mountPath: /usr/src/
      inputs:
        parameters:
          - name: repo
          - name: revision
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure

    - name: continuous-integration-angular
      script:
        image: tenlastic/node-chrome-lerna:latest
        command: [sh]
        source: |
          set -e
          lerna run lint --ci --scope @tenlastic/*-ui --scope @tenlastic/ng-* --since
          lerna run build --ci --concurrency 1 --include-dependencies --scope @tenlastic/*-ui --scope @tenlastic/ng-* --since
          lerna run test --ci --concurrency 1 --scope @tenlastic/*-ui --scope @tenlastic/ng-* --since
        envFrom:
          - secretRef:
              name: ci-environment-variables
        resources:
          requests:
            memory: 4096M
            cpu: 500m
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/projects/javascript/
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: continuous-integration-nodejs
      script:
        image: tenlastic/node-chrome-lerna:latest
        command: [sh]
        source: |
          set -e
          lerna run lint --ci --ignore @tenlastic/*-ui --ignore @tenlastic/ng-* --scope @tenlastic/* --since 
          lerna run build --ci --include-dependencies --ignore @tenlastic/*-ui --ignore @tenlastic/ng-* --scope @tenlastic/* --since
          lerna run test --ci --ignore @tenlastic/*-ui --ignore @tenlastic/ng-* --scope @tenlastic/* --since
        envFrom:
          - secretRef:
              name: ci-environment-variables
        resources:
          requests:
            memory: 4096M
            cpu: 500m
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/projects/javascript/
      sidecars:
        - name: docker-registry
          image: registry:latest
          command:
            - /bin/sh
            - -c
            - trap "exit 0" SIGKILL && ./entrypoint.sh /etc/docker/registry/config.yml
        - name: kafka
          image: spotify/kafka:latest
          env:
            - name: ADVERTISED_HOST
              value: localhost
            - name: ADVERTISED_PORT
              value: "9092"
        - name: mongo
          image: tenlastic/mongo-replica-set:latest
          env:
            - name: REPLICA_SET_HOSTNAME
              value: localhost
        - name: minio
          image: minio/minio:latest
          command:
            - minio
            - server
            - /data
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: get-branch
      script:
        image: alpine/git:latest
        command: [sh]
        source: git branch --contains {{inputs.parameters.revision}} --remotes | tail +2 | cut -c 3-
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      inputs:
        parameters:
          - name: revision
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: get-docker-images
      script:
        image: tenlastic/node-chrome-lerna:latest
        command: [sh]
        source: |
          set -e
          npm i -g json
          lerna list --all --ignore @tenlastic/ng-* --json --scope @tenlastic/* | \
            json -0 -c 'this.private === true' -e 'this.name = this.name.replace("@tenlastic/","")'
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/projects/javascript/
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: migrations
      script:
        image: tenlastic/node-chrome-lerna:latest
        command: [sh]
        source: |
          set -e
          lerna run build --ci --include-dependencies --scope @tenlastic/migrations --scope nodejs
          npm run start
        envFrom:
          - secretRef:
              name: cd-environment-variables
        resources:
          requests:
            memory: 4096M
            cpu: 500m
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/projects/javascript/nodejs/applications/migrations/
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: publish-docker-image
      container:
        image: gcr.io/kaniko-project/executor:v1.5.0
        args:
          - --dockerfile="{{inputs.parameters.dockerfile}}"
          - --context="dir://{{inputs.parameters.context}}"
          - --destination="tenlastic/{{inputs.parameters.image}}:{{inputs.parameters.tag}}"
          - --destination="tenlastic/{{inputs.parameters.image}}:latest"
          - --destination="docker.pkg.github.com/tenlastic/open-platform/{{inputs.parameters.image}}:{{inputs.parameters.tag}}"
          - --destination="docker.pkg.github.com/tenlastic/open-platform/{{inputs.parameters.image}}:latest"
          - --destination="docker-registry.tenlastic.com/{{inputs.parameters.image}}:{{inputs.parameters.tag}}"
          - --destination="docker-registry.tenlastic.com/{{inputs.parameters.image}}:latest"
        resources:
          requests:
            memory: 500M
            cpu: 500m
        volumeMounts:
          - name: kaniko
            mountPath: /kaniko/.docker/
          - name: workspace
            mountPath: /workspace/
      inputs:
        parameters:
          - name: context
          - name: dockerfile
          - name: image
          - name: tag
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure
      volumes:
        - name: kaniko
          secret:
            items:
              - key: KANIKO
                path: config.json
            secretName: cd-environment-variables

    - name: publish-electron-applications
      script:
        image: electronuserland/builder:wine
        command: [sh]
        source: |
          set -e
          lerna run electron:install --ci
          lerna run electron:windows --ci -- -- --publish always --win
        envFrom:
          - secretRef:
              name: cd-environment-variables
        resources:
          requests:
            memory: 4096M
            cpu: 500m
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/projects/javascript/
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure

    - name: publish-npm-modules
      script:
        image: tenlastic/node-chrome-lerna:latest
        command: [sh]
        source: |
          set -e

          # Add Host Key for Github.
          mkdir -p /root/.ssh/
          ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
          cp /tmp/secrets/cd-ssh-keys/id_rsa /root/.ssh/id_rsa

          # Update Git Credentials.
          git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
          git config --global gc.auto 0 || true
          git config user.email $GITHUB_USER_EMAIL
          git config user.name $GITHUB_USER_NAME

          # Build Applications.
          lerna run build --ci

          # Publish Node Modules to NPM.
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          npm config set unsafe-perm true
          lerna publish --ci --exact --message "javascript-v%v [skip ci]" --tag-version-prefix javascript-v --yes patch
          npm config set unsafe-perm true

          # Publish Node Modules to Github.
          echo "@tenlastic:registry=https://npm.pkg.github.com" > ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> ~/.npmrc

          lerna publish --ci --registry https://npm.pkg.github.com --yes from-package
        envFrom:
          - secretRef:
              name: cd-environment-variables
        resources:
          requests:
            memory: 4096M
            cpu: 500m
        volumeMounts:
          - name: cd-ssh-keys
            mountPath: /tmp/secrets/cd-ssh-keys/
            readonly: true
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/projects/javascript/
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure

    - name: skip-ci
      script:
        image: alpine/git:latest
        command: [sh]
        source: |
          case $(git log -1 --pretty=%B) in 
            *\[skip\ ci\]*) echo "true" ;;
            *) echo "false";; 
          esac
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure

    - name: terraform
      script:
        image: hashicorp/terraform:0.14.5
        command: [sh]
        source: |
          set -e
          terraform init
          terraform apply -auto-approve
        envFrom:
          - secretRef:
              name: cd-environment-variables
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/gcp/terraform/
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure
