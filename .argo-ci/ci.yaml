apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: continuous-integration-
spec:
  arguments:
    parameters:
      - name: repo
        value: git@github.com:tenlastic/open-platform.git
      - name: revision
  entrypoint: pipeline
  podGC:
    strategy: OnPodSuccess
  serviceAccountName: argo
  ttlStrategy:
    secondsAfterSuccess: 1296000
  volumeClaimTemplates:
    - metadata:
        name: node-modules
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: workspace
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
  volumes:
    - name: cd-ssh-keys
      secret:
        secretName: cd-ssh-keys
        defaultMode: 0600
  templates:
    - name: pipeline
      inputs:
        parameters:
          - name: repo
          - name: revision
      steps:
        - - name: checkout
            template: checkout
            arguments:
              parameters:
                - name: repo
                  value: "{{inputs.parameters.repo}}"
                - name: revision
                  value: "{{inputs.parameters.revision}}"

        - - name: skip-ci
            template: skip-ci

        - - name: get-branch
            template: get-branch
            arguments:
              parameters:
                - name: revision
                  value: "{{inputs.parameters.revision}}"

        - - name: continuous-integration-nodejs
            template: continuous-integration-nodejs
            when: "'{{steps.skip-ci.outputs.result}}' == 'false'"

        - - name: continuous-integration-angular
            template: continuous-integration-angular
            when: "'{{steps.skip-ci.outputs.result}}' == 'false'"

        - - name: migrations
            template: migrations
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"

        - - name: terraform
            template: terraform
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"

        - - name: publish-npm-modules
            template: publish-npm-modules
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"

        - - name: publish-docker-images
            template: publish-docker-images
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"

        - - name: publish-electron-applications
            template: publish-electron-applications
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"

        - - name: publish-miscellaneous-docker-images
            template: publish-miscellaneous-docker-images
            when: "('{{steps.skip-ci.outputs.result}}' == 'false') && ('{{steps.get-branch.outputs.result}}' == 'origin/master')"

    - name: checkout
      script:
        image: alpine/git:latest
        command: [sh]
        source: |
          # Add Host Key for Github.
          mkdir -p /root/.ssh/
          ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
          cp /tmp/secrets/cd-ssh-keys/id_rsa /root/.ssh/id_rsa

          # Use SSH instead of HTTPS.
          git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
          git config --global gc.auto 0 || true

          # Clone repository and reset to specific revision.
          git clone {{inputs.parameters.repo}} /usr/src/app/
          cd /usr/src/app/
          git fetch --all
          git reset --hard {{inputs.parameters.revision}}
        volumeMounts:
          - name: cd-ssh-keys
            mountPath: /tmp/secrets/cd-ssh-keys/
            readonly: true
          - name: workspace
            mountPath: /usr/src/
      inputs:
        parameters:
          - name: repo
          - name: revision
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure

    - name: continuous-integration-angular
      container:
        image: node:12
        command: [sh]
        args: [./.argo-ci/continuous-integration-angular.sh]
        envFrom:
          - secretRef:
              name: ci-environment-variables
        resources:
          requests:
            memory: 4096M
            cpu: 500m
        volumeMounts:
          - name: node-modules
            mountPath: /usr/src/app/projects/javascript/node_modules/
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: continuous-integration-nodejs
      container:
        image: node:12
        command: [sh]
        args: [./.argo-ci/continuous-integration-nodejs.sh]
        envFrom:
          - secretRef:
              name: ci-environment-variables
        resources:
          requests:
            memory: 4096M
            cpu: 500m
        volumeMounts:
          - name: node-modules
            mountPath: /usr/src/app/projects/javascript/node_modules/
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      sidecars:
        - name: dind
          image: docker:19.03.8-dind
          command:
            - "dockerd"
            - "--host"
            - "tcp://0.0.0.0:2375"
          securityContext:
            privileged: true
        - name: docker-registry
          image: registry:latest
          command:
            - /bin/sh
            - -c
            - trap "exit 0" SIGKILL && ./entrypoint.sh /etc/docker/registry/config.yml
        - name: kafka
          image: spotify/kafka:latest
          env:
            - name: ADVERTISED_HOST
              value: localhost
            - name: ADVERTISED_PORT
              value: "9092"
        - name: mongo
          image: tenlastic/mongo-replica-set:latest
          env:
            - name: REPLICA_SET_HOSTNAME
              value: localhost
        - name: minio
          image: minio/minio:latest
          command:
            - minio
            - server
            - /data
        - name: rabbitmq
          image: rabbitmq
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: get-branch
      script:
        image: alpine/git:latest
        command: [sh]
        source: git branch --contains {{inputs.parameters.revision}} --remotes | tail +2 | cut -c 3-
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      inputs:
        parameters:
          - name: revision
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: migrations
      container:
        image: node:12
        command: [sh]
        args: [./.argo-ci/migrations.sh]
        envFrom:
          - secretRef:
              name: cd-environment-variables
        resources:
          requests:
            memory: 4096M
            cpu: 500m
        volumeMounts:
          - name: node-modules
            mountPath: /usr/src/app/projects/javascript/node_modules/
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: publish-docker-images
      container:
        image: node:12
        command: [sh]
        args: [./.argo-ci/publish-docker-images.sh]
        env:
          - name: DOCKER_HOST
            value: 127.0.0.1
        envFrom:
          - secretRef:
              name: cd-environment-variables
        resources:
          requests:
            memory: 4096M
            cpu: 500m
        volumeMounts:
          - name: node-modules
            mountPath: /usr/src/app/projects/javascript/node_modules/
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      sidecars:
        - name: dind
          image: docker:19.03.8-dind
          command:
            - "dockerd"
            - "--host"
            - "tcp://0.0.0.0:2375"
          securityContext:
            privileged: true
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure

    - name: publish-electron-applications
      container:
        image: electronuserland/builder:wine
        command: [sh]
        args: [./.argo-ci/publish-electron-applications.sh]
        envFrom:
          - secretRef:
              name: cd-environment-variables
        resources:
          requests:
            memory: 4096M
            cpu: 500m
        volumeMounts:
          - name: node-modules
            mountPath: /usr/src/app/projects/javascript/node_modules/
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure

    - name: publish-miscellaneous-docker-images
      container:
        image: docker:19.03.8
        command: [sh]
        args: [./.argo-ci/publish-miscellaneous-docker-images.sh]
        env:
          - name: DOCKER_HOST
            value: 127.0.0.1
        envFrom:
          - secretRef:
              name: cd-environment-variables
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      sidecars:
        - name: dind
          image: docker:19.03.8-dind
          command:
            - "dockerd"
            - "--host"
            - "tcp://0.0.0.0:2375"
          securityContext:
            privileged: true
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure

    - name: publish-npm-modules
      container:
        image: node:12
        command: [sh]
        args: [./.argo-ci/publish-npm-modules.sh]
        envFrom:
          - secretRef:
              name: cd-environment-variables
        resources:
          requests:
            memory: 4096M
            cpu: 500m
        volumeMounts:
          - name: cd-ssh-keys
            mountPath: /tmp/secrets/cd-ssh-keys/
            readonly: true
          - name: node-modules
            mountPath: /usr/src/app/projects/javascript/node_modules/
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure

    - name: skip-ci
      script:
        image: alpine/git:latest
        command: [sh]
        source: |
          case $(git log -1 --pretty=%B) in 
            *\[skip\ ci\]*) echo "true" ;;
            *) echo "false";; 
          esac
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure

    - name: terraform
      container:
        image: hashicorp/terraform:0.11.13
        command: [sh]
        args: [./.argo-ci/terraform.sh]
        envFrom:
          - secretRef:
              name: cd-environment-variables
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnFailure
