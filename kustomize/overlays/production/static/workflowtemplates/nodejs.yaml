apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: nodejs
  namespace: static
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: tenlastic.com/low-priority
                operator: Exists
    podAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: workflows.argoproj.io/workflow
                  operator: In
                  values:
                    - "{{workflow.name}}"
            topologyKey: kubernetes.io/hostname
  archiveLogs: true
  arguments:
    parameters:
      - name: revision
  artifactGC:
    forceFinalizerRemoval: true
    serviceAccountName: argo-workflows
    strategy: OnWorkflowDeletion
  entrypoint: entrypoint
  podGC:
    strategy: OnWorkflowSuccess
  serviceAccountName: argo-workflows
  ttlStrategy:
    secondsAfterSuccess: 86400
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10G
        storageClassName: balanced-expandable
  volumes:
    - name: continuous-deployment
      secret:
        secretName: continuous-deployment
        items:
          - key: GITHUB_PRIVATE_KEY
            path: id_rsa
  templates:
    - name: entrypoint
      inputs:
        parameters:
          - name: revision
      steps:
        - - name: checkout
            templateRef:
              name: checkout
              template: entrypoint
            arguments:
              parameters:
                - name: revision
                  value: "{{inputs.parameters.revision}}"
        - - name: nodejs
            when: "'{{steps.checkout.outputs.parameters.skip}}' == 'false'"
            template: nodejs
            arguments:
              parameters:
                - name: branch
                  value: "{{steps.checkout.outputs.parameters.branch}}"

    - name: nodejs
      inputs:
        parameters:
          - name: branch
      parallelism: 5
      steps:
        - - name: bootstrap
            template: bootstrap
            arguments:
              parameters:
                - name: workingDir
                  value: /workspace/open-platform/nodejs/
        - - name: continuous-integration
            template: continuous-integration
        - - name: suspend
            template: suspend
        - - name: migrations
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: migrations
        - - name: publish-npm-modules
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: publish-npm-modules
            arguments:
              parameters:
                - name: workingDir
                  value: /workspace/open-platform/nodejs/
        - - name: get-docker-images
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: get-docker-images
            arguments:
              parameters:
                - name: workingDir
                  value: /workspace/open-platform/nodejs/
        - - name: build-docker-images
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: build-docker-image
            arguments:
              parameters:
                - name: context
                  value: "{{item.location}}"
                - name: image
                  value: "{{item.name}}"
            withParam: "{{steps.get-docker-images.outputs.result}}"
        - - name: publish-docker-images
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: publish-docker-image
            arguments:
              parameters:
                - name: context
                  value: "{{item.location}}"
                - name: dockerfile
                  value: Dockerfile
                - name: image
                  value: "{{item.name}}"
                - name: tag
                  value: "{{item.version}}"
            withParam: "{{steps.get-docker-images.outputs.result}}"
        - - name: commit
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: commit
            arguments:
              parameters:
                - name: workingDir
                  value: /workspace/open-platform/nodejs/

    - name: bootstrap
      container:
        image: tenlastic/node-development:latest
        command: [bash]
        args: [/workspace/open-platform/scripts/bootstrap.sh]
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: "{{inputs.parameters.workingDir}}"
      inputs:
        parameters:
          - name: workingDir

    - name: build-docker-image
      container:
        image: tenlastic/node-development:latest
        command: [bash]
        args: [/workspace/open-platform/scripts/build-docker-image.sh]
        env:
          - name: CONTEXT
            value: "{{inputs.parameters.context}}"
          - name: SCOPE
            value: "@tenlastic/{{inputs.parameters.image}}"
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: /workspace/open-platform/
      inputs:
        parameters:
          - name: context
          - name: image

    - name: commit
      container:
        image: alpine/git:latest
        command: [sh]
        args: [/workspace/open-platform/scripts/commit.sh]
        envFrom:
          - secretRef:
              name: continuous-deployment
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: continuous-deployment
            mountPath: /tmp/secrets/continuous-deployment/
            readonly: true
          - name: workspace
            mountPath: /workspace/
        workingDir: "{{inputs.parameters.workingDir}}"
      inputs:
        parameters:
          - name: workingDir

    - name: continuous-integration
      container:
        image: tenlastic/node-development:latest
        command: [bash]
        args:
          [/workspace/open-platform/scripts/continuous-integration-nodejs.sh]
        envFrom:
          - secretRef:
              name: continuous-integration
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: /workspace/open-platform/nodejs/
      sidecars:
        - name: minio
          image: minio/minio:RELEASE.2022-12-12T19-27-27Z
          imagePullPolicy: IfNotPresent
          args:
            - server
            - /data
        - name: mongo
          image: mongo:6.0.2
          imagePullPolicy: IfNotPresent
          args:
            - --bind_ip_all
            - --replSet
            - rs0
        - name: mongo-sidecar
          image: mongo:6.0.2
          command: [sh, -c]
          args:
            - |
              echo "Waiting for MongoDB to be ready..."
              until mongosh --eval "db.adminCommand('ping')" --host localhost; do
                echo "Still waiting for MongoDB to be ready..."
                sleep 1
              done

              echo "Initializing replica set..." 
              mongosh --eval 'rs.initiate({_id: "rs0", members: [{_id: 0, host: "localhost:27017"}]})' --host localhost

              echo "Replica set initialized!"
        - name: nats
          image: nats:2.9.17-alpine
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - trap "exit 0" SIGKILL && docker-entrypoint.sh --js

    - name: get-docker-images
      container:
        image: tenlastic/node-development:latest
        command: [bash]
        args: [/workspace/open-platform/scripts/get-docker-images.sh]
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: "{{inputs.parameters.workingDir}}"
      inputs:
        parameters:
          - name: workingDir

    - name: migrations
      container:
        image: tenlastic/node-development:latest
        command: [bash]
        args: [/workspace/open-platform/scripts/migrations.sh]
        envFrom:
          - secretRef:
              name: continuous-deployment
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: /workspace/open-platform/nodejs/

    - name: publish-docker-image
      container:
        image: gcr.io/kaniko-project/executor:v1.8.0
        command: [/kaniko/executor]
        args:
          - --context=dir://{{inputs.parameters.context}}
          - --dockerfile={{inputs.parameters.dockerfile}}
          - --destination=tenlastic/{{inputs.parameters.image}}:{{inputs.parameters.tag}}
          - --destination=tenlastic/{{inputs.parameters.image}}:latest
          - --destination=docker.pkg.github.com/tenlastic/open-platform/{{inputs.parameters.image}}:{{inputs.parameters.tag}}
          - --destination=docker.pkg.github.com/tenlastic/open-platform/{{inputs.parameters.image}}:latest
          - --push-retry=2
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: kaniko
            mountPath: /kaniko/.docker/
          - name: workspace
            mountPath: /workspace/
      inputs:
        parameters:
          - name: context
          - name: dockerfile
          - name: image
          - name: tag
      volumes:
        - name: kaniko
          secret:
            items:
              - key: KANIKO
                path: config.json
            secretName: continuous-deployment

    - name: publish-npm-modules
      container:
        image: tenlastic/node-development:latest
        command: [bash]
        args: [/workspace/open-platform/scripts/publish-npm-modules.sh]
        envFrom:
          - secretRef:
              name: continuous-deployment
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: continuous-deployment
            mountPath: /tmp/secrets/continuous-deployment/
            readonly: true
          - name: workspace
            mountPath: /workspace/
        workingDir: "{{inputs.parameters.workingDir}}"
      inputs:
        parameters:
          - name: workingDir

    - name: suspend
      suspend: {}
