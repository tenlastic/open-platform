apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: garbage-collect-docker-registry
  namespace: static
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - patch
      - watch
  - apiGroups:
      - ""
    resources:
      - pods/exec
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - get
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: garbage-collect-docker-registry
  namespace: static
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: garbage-collect-docker-registry
subjects:
  - kind: ServiceAccount
    name: garbage-collect-docker-registry
    namespace: static
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: garbage-collect-docker-registry
  namespace: static
---
apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: garbage-collect-docker-registry
  namespace: static
spec:
  concurrencyPolicy: Allow
  schedule: 0 2 * * *
  startingDeadlineSeconds: 0
  timezone: America/New_York
  workflowSpec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: tenlastic.com/low-priority
                  operator: Exists
    entrypoint: entrypoint
    podGC:
      strategy: OnWorkflowCompletion
    serviceAccountName: garbage-collect-docker-registry
    ttlStrategy:
      secondsAfterSuccess: 60
    templates:
      - name: entrypoint
        steps:
          - - name: enable-readonly
              template: enable-readonly
          - - name: garbage-collect
              template: garbage-collect
          - - name: disable-readonly
              template: disable-readonly

      - name: disable-readonly
        script:
          command: [sh]
          image: bitnami/kubectl:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 100m
              memory: 50M
            requests:
              cpu: 25m
              memory: 50M
          source: |
            kubectl annotate deployments docker-registry fluxcd.io/ignore="false" --overwrite
            kubectl patch deployments.apps docker-registry --type=json \
              -p='[
                {
                  "op": "replace", 
                  "path": "/spec/template/spec/containers/0/env/1", 
                  "value": {
                    "name": "REGISTRY_STORAGE_MAINTENANCE_READONLY",
                    "value": "{\"enabled\":false}"
                  }
                }
              ]'

      - name: enable-readonly
        script:
          command: [sh]
          image: bitnami/kubectl:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 100m
              memory: 50M
            requests:
              cpu: 25m
              memory: 50M
          source: |
            kubectl annotate deployments docker-registry fluxcd.io/ignore="true" --overwrite
            kubectl patch deployments.apps docker-registry --type=json \
              -p='[
                {
                  "op": "replace", 
                  "path": "/spec/template/spec/containers/0/env/1", 
                  "value": {
                    "name": "REGISTRY_STORAGE_MAINTENANCE_READONLY",
                    "value": "{\"enabled\":true}"
                  }
                }
              ]'

      - name: garbage-collect
        container:
          image: registry:2.7.1
          command:
            - /bin/registry
            - garbage-collect
            - --delete-untagged=true
            - /etc/docker/registry/config.yaml
          env:
            - name: REGISTRY_STORAGE_S3_ACCESSKEY
              valueFrom:
                secretKeyRef:
                  name: docker-registry
                  key: s3AccessKey
            - name: REGISTRY_STORAGE_S3_REGIONENDPOINT
              value: http://minio:9000
            - name: REGISTRY_STORAGE_S3_SECRETKEY
              valueFrom:
                secretKeyRef:
                  name: docker-registry
                  key: s3SecretKey
          resources:
            limits:
              cpu: 500m
              memory: 100M
            requests:
              cpu: 100m
              memory: 100M
          volumeMounts:
            - name: docker-registry-config
              mountPath: /etc/docker/registry/
        volumes:
          - name: docker-registry-config
            configMap:
              name: docker-registry
