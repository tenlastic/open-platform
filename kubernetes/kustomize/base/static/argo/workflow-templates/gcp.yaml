apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: gcp
  namespace: static
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: tenlastic.com/low-priority
                operator: Exists
    podAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: workflows.argoproj.io/workflow
                  operator: In
                  values:
                    - "{{workflow.name}}"
            topologyKey: kubernetes.io/hostname
  archiveLogs: true
  arguments:
    parameters:
      - name: revision
  entrypoint: entrypoint
  podGC:
    strategy: OnWorkflowSuccess
  serviceAccountName: argo-workflows
  ttlStrategy:
    secondsAfterSuccess: 86400
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10G
        storageClassName: balanced-expandable
  volumes:
    - name: continuous-deployment
      secret:
        secretName: continuous-deployment
        items:
          - key: GITHUB_PRIVATE_KEY
            path: id_rsa
  templates:
    - name: entrypoint
      inputs:
        parameters:
          - name: revision
      steps:
        - - name: checkout
            templateRef:
              name: checkout
              template: entrypoint
            arguments:
              parameters:
                - name: revision
                  value: "{{inputs.parameters.revision}}"
        - - name: gcp
            when: "'{{steps.checkout.outputs.parameters.skip}}' == 'false'"
            template: gcp
            arguments:
              parameters:
                - name: branch
                  value: "{{steps.checkout.outputs.parameters.branch}}"

    - name: gcp
      inputs:
        parameters:
          - name: branch
      steps:
        - - name: terraform
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: terraform

    - name: terraform
      container:
        image: hashicorp/terraform:0.14.5
        command: [sh]
        args:
          - /workspace/open-platform/scripts/terraform.sh
        envFrom:
          - secretRef:
              name: continuous-deployment
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: /workspace/open-platform/gcp/terraform/
