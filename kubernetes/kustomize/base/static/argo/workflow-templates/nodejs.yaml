apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: nodejs
  namespace: static
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: tenlastic.com/low-priority
                operator: Exists
    podAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: workflows.argoproj.io/workflow
                  operator: In
                  values:
                    - "{{workflow.name}}"
            topologyKey: kubernetes.io/hostname
  arguments:
    parameters:
      - name: repo
        value: git@github.com:tenlastic/open-platform.git
      - name: revision
  entrypoint: entrypoint
  podGC:
    strategy: OnWorkflowSuccess
  serviceAccountName: argo-workflows
  ttlStrategy:
    secondsAfterSuccess: 86400
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10G
        storageClassName: balanced-expandable
  volumes:
    - name: continuous-deployment
      secret:
        secretName: continuous-deployment
        items:
          - key: GITHUB_PRIVATE_KEY
            path: id_rsa
  templates:
    - name: entrypoint
      inputs:
        parameters:
          - name: repo
          - name: revision
      parallelism: 2
      steps:
        - - name: checkout
            template: checkout
            arguments:
              parameters:
                - name: repo
                  value: "{{inputs.parameters.repo}}"
                - name: revision
                  value: "{{inputs.parameters.revision}}"
        - - name: get-branch
            template: get-branch
            arguments:
              parameters:
                - name: revision
                  value: "{{inputs.parameters.revision}}"
          - name: skip
            template: skip
        - - name: nodejs
            when: "'{{steps.skip.outputs.result}}' == 'false'"
            template: nodejs
            arguments:
              parameters:
                - name: branch
                  value: "{{steps.get-branch.outputs.result}}"

    - name: nodejs
      inputs:
        parameters:
          - name: branch
      parallelism: 5
      steps:
        - - name: bootstrap
            template: bootstrap
            arguments:
              parameters:
                - name: workingDir
                  value: /workspace/open-platform/nodejs/
        - - name: continuous-integration
            template: continuous-integration
        - - name: migrations
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: migrations
        - - name: publish-npm-modules
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: publish-npm-modules
            arguments:
              parameters:
                - name: workingDir
                  value: /workspace/open-platform/nodejs/
        - - name: get-docker-images
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: get-docker-images
            arguments:
              parameters:
                - name: workingDir
                  value: /workspace/open-platform/nodejs/
        - - name: build-docker-images
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: build-docker-image
            arguments:
              parameters:
                - name: context
                  value: "{{item.location}}"
                - name: image
                  value: "{{item.name}}"
            withParam: "{{steps.get-docker-images.outputs.result}}"
        - - name: publish-docker-images
            when: "'{{inputs.parameters.branch}}' == 'origin/master'"
            template: publish-docker-image
            arguments:
              parameters:
                - name: context
                  value: "{{item.location}}"
                - name: dockerfile
                  value: Dockerfile
                - name: image
                  value: "{{item.name}}"
                - name: tag
                  value: "{{item.version}}"
            withParam: "{{steps.get-docker-images.outputs.result}}"

    - name: bootstrap
      container:
        image: tenlastic/node-development:latest
        command: [bash]
        args:
          - /workspace/open-platform/ci-cd/bootstrap.sh
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: "{{inputs.parameters.workingDir}}"
      inputs:
        parameters:
          - name: workingDir

    - name: build-docker-image
      container:
        image: tenlastic/node-development:latest
        command: [bash]
        args:
          - /workspace/open-platform/ci-cd/build-docker-image.sh
        env:
          - name: CONTEXT
            value: "{{inputs.parameters.context}}"
          - name: SCOPE
            value: "@tenlastic/{{inputs.parameters.image}}"
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: /workspace/open-platform/
      inputs:
        parameters:
          - name: context
          - name: image

    - name: checkout
      script:
        image: alpine/git:latest
        command: [sh]
        source: |
          # Add Host Key for Github.
          mkdir -p /root/.ssh/
          ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
          cp /tmp/secrets/continuous-deployment/id_rsa /root/.ssh/id_rsa
          chmod 600 /root/.ssh/id_rsa

          # Use SSH instead of HTTPS.
          git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
          git config --global gc.auto 0 || true

          # Clone repository and reset to specific revision.
          git clone {{inputs.parameters.repo}} /workspace/open-platform/
          cd /workspace/open-platform/
          git fetch --all
          git reset --hard {{inputs.parameters.revision}}
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: continuous-deployment
            mountPath: /tmp/secrets/continuous-deployment/
            readonly: true
          - name: workspace
            mountPath: /workspace/
      inputs:
        parameters:
          - name: repo
          - name: revision

    - name: continuous-integration
      container:
        image: tenlastic/node-development:latest
        command: [bash]
        args:
          - /workspace/open-platform/ci-cd/continuous-integration-nodejs.sh
        envFrom:
          - secretRef:
              name: continuous-integration
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: /workspace/open-platform/nodejs/
      sidecars:
        - name: mongodb
          image: bitnami/mongodb:6.0.2
          imagePullPolicy: IfNotPresent
          env:
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: localhost
            - name: MONGODB_REPLICA_SET_KEY
              value: "1234567890"
            - name: MONGODB_REPLICA_SET_MODE
              value: primary
            - name: MONGODB_ROOT_PASSWORD
              value: password
        - name: minio
          image: bitnami/minio:2022
          imagePullPolicy: IfNotPresent
          env:
            - name: MINIO_ROOT_PASSWORD
              value: minioadmin
            - name: MINIO_ROOT_USER
              value: minioadmin
        - name: nats
          image: nats:2.8.4-alpine
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - trap "exit 0" SIGKILL && docker-entrypoint.sh --js
        - name: redis
          image: bitnami/redis:6.2.7
          imagePullPolicy: IfNotPresent
          env:
            - name: REDIS_PASSWORD
              value: password
        - name: redis-sentinel
          image: bitnami/redis-sentinel:6.2.7
          imagePullPolicy: IfNotPresent
          env:
            - name: REDIS_MASTER_HOST
              value: localhost

    - name: get-branch
      script:
        image: alpine/git:latest
        command: [sh]
        source: git branch --contains {{inputs.parameters.revision}} --remotes | tail +2 | cut -c 3-
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: /workspace/open-platform/
      inputs:
        parameters:
          - name: revision

    - name: get-docker-images
      script:
        image: tenlastic/node-development:latest
        command: [bash]
        source: |
          npm i -g json &> /dev/null

          # Explicitly use local Lerna version to avoid "info cli using local version of lerna" message.
          JSON=$(./node_modules/.bin/lerna list --all --json --loglevel silent --scope @tenlastic/* 2> /dev/null || echo "[]")
          echo "${JSON}" | json -0 -c 'this.private === true' -e 'this.name = this.name.replace("@tenlastic/","")'
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: "{{inputs.parameters.workingDir}}"
      inputs:
        parameters:
          - name: workingDir

    - name: migrations
      container:
        image: tenlastic/node-development:latest
        command: [bash]
        args:
          - /workspace/open-platform/ci-cd/migrations.sh
        envFrom:
          - secretRef:
              name: continuous-deployment
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: /workspace/open-platform/nodejs/

    - name: publish-docker-image
      container:
        image: gcr.io/kaniko-project/executor:v1.8.0
        command: [/kaniko/executor]
        args:
          - --context=dir://{{inputs.parameters.context}}
          - --dockerfile={{inputs.parameters.dockerfile}}
          - --destination=tenlastic/{{inputs.parameters.image}}:{{inputs.parameters.tag}}
          - --destination=tenlastic/{{inputs.parameters.image}}:latest
          - --destination=docker.pkg.github.com/tenlastic/open-platform/{{inputs.parameters.image}}:{{inputs.parameters.tag}}
          - --destination=docker.pkg.github.com/tenlastic/open-platform/{{inputs.parameters.image}}:latest
          - --push-retry=2
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: kaniko
            mountPath: /kaniko/.docker/
          - name: workspace
            mountPath: /workspace/
      inputs:
        parameters:
          - name: context
          - name: dockerfile
          - name: image
          - name: tag
      volumes:
        - name: kaniko
          secret:
            items:
              - key: KANIKO
                path: config.json
            secretName: continuous-deployment

    - name: publish-npm-modules
      container:
        image: tenlastic/node-development:latest
        command: [bash]
        args:
          - /workspace/open-platform/ci-cd/publish-npm-modules.sh
        envFrom:
          - secretRef:
              name: continuous-deployment
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: continuous-deployment
            mountPath: /tmp/secrets/continuous-deployment/
            readonly: true
          - name: workspace
            mountPath: /workspace/
        workingDir: "{{inputs.parameters.workingDir}}"
      inputs:
        parameters:
          - name: workingDir

    - name: skip
      script:
        image: alpine/git:latest
        command: [sh]
        source: |
          case $(git log -1 --pretty=%B) in 
            *\[skip\ ci\]*) echo "true" ;;
            *) echo "false";; 
          esac
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: workspace
            mountPath: /workspace/
        workingDir: /workspace/open-platform/
